aes(x=AGE, y=perc)
) + geom_line()
who_likes_category + facet_grid(CATEGORY_NAME ~ .)
who_likes_category <- ggplot(category_summary_w_demo,
aes(x=AGE, y=perc, group=GENDER_ID)
) + geom_line()
who_likes_category + facet_grid(CATEGORY_NAME ~ .)
who_likes_category <- ggplot(category_summary_w_demo,
aes(x=AGE, y=perc, group=GENDER_ID, color=GENDER_ID)
) + geom_line()
who_likes_category + facet_grid(CATEGORY_NAME ~ .)
who_likes_category + facet_grid(CATEGORY_NAME ~ .) +
ggtitle("% of Users Redeeming, by Sweeps Category") +
theme(plot.title=element_text(size=30, face="bold"))
head(sweeps_summary)
reward_summary <- ddply(sweeps_summary, .(REWARD_TITLE,AGE, GENDER_ID),
summarize,
num_enter = length(num)
)
reward_summary_w_demo <- merge(reward_summary,
user_redemption_summary[,1:3],
by.x = c("AGE", "GENDER_ID"),
by.y = c("AGE", "GENDER_ID")
)
reward_summary_w_demo$perc <- reward_summary_w_demo$num_enter /
reward_summary_w_demo$num
who_likes_reward <- ggplot(reward_summary_w_demo,
aes(x=AGE, y=perc, group=GENDER_ID, color=GENDER_ID)
) + geom_line()
who_likes_reward + facet_grid(CATEGORY_NAME ~ .) +
ggtitle("% of Users Redeeming, by Reward Category") +
theme(plot.title=element_text(size=30, face="bold"))
who_likes_reward + facet_grid(REWARD_TITLE ~ .) +
ggtitle("% of Users Redeeming, by Reward Category") +
theme(plot.title=element_text(size=30, face="bold"))
who_likes_reward + facet_wrap(REWARD_TITLE ~ .) +
ggtitle("% of Users Redeeming, by Reward Category") +
theme(plot.title=element_text(size=30, face="bold"))
who_likes_reward <- ggplot(reward_summary_w_demo,
aes(x=AGE, y=perc, group=GENDER_ID, color=GENDER_ID)
) + geom_line()
who_likes_reward + facet_wrap(REWARD_TITLE ~ .) +
ggtitle("% of Users Redeeming, by Reward Category") +
theme(plot.title=element_text(size=30, face="bold"))
who_likes_reward + facet_wrap( ~ REWARD_TITLE) +
ggtitle("% of Users Redeeming, by Reward Category") +
theme(plot.title=element_text(size=30, face="bold"))
gsub('Enter for Access to', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Enter for Access to', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Enter to Win a Trip', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Gain Access to the Zumiez', '', reward_summary_w_demo$REWARD_TITLE)
who_likes_reward <- ggplot(reward_summary_w_demo,
aes(x=AGE, y=perc, group=GENDER_ID, color=GENDER_ID)
) + geom_line()
who_likes_reward + facet_wrap( ~ REWARD_TITLE) +
ggtitle("% of Users Redeeming, by Reward Category") +
theme(plot.title=element_text(size=30, face="bold"))
reward_summary_w_demo$REWARD_TITLE <- gsub('Access to the Zumiez', '', reward_summary_w_demo$REWARD_TITLE)
who_likes_reward <- ggplot(reward_summary_w_demo,
aes(x=AGE, y=perc, group=GENDER_ID, color=GENDER_ID)
) + geom_line()
who_likes_reward + facet_wrap( ~ REWARD_TITLE) +
ggtitle("% of Users Redeeming, by Reward Category") +
theme(plot.title=element_text(size=30, face="bold"))
reward_summary_w_demo$REWARD_TITLE <- gsub('Enter for Access to', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Enter to Win a Trip', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Gain Access to the Zumiez', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Gain Access to ', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Enter to Win', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Access to the Zumiez', '', reward_summary_w_demo$REWARD_TITLE)
who_likes_reward <- ggplot(reward_summary_w_demo,
aes(x=AGE, y=perc, group=GENDER_ID, color=GENDER_ID)
) + geom_line()
who_likes_reward + facet_wrap( ~ REWARD_TITLE) +
ggtitle("% of Users Redeeming, by Reward Category") +
theme(plot.title=element_text(size=30, face="bold"))
?left
reward_summary_w_demo$REWARD_TITLE <- substr(reward_summary_w_demo$REWARD_TITLE, 0, 50)
who_likes_reward <- ggplot(reward_summary_w_demo,
aes(x=AGE, y=perc, group=GENDER_ID, color=GENDER_ID)
) + geom_line()
who_likes_reward + facet_wrap( ~ REWARD_TITLE) +
ggtitle("% of Users Redeeming, by Reward Category") +
theme(plot.title=element_text(size=30, face="bold"))
reward_summary_w_demo <- merge(reward_summary,
user_redemption_summary[,1:3],
by.x = c("AGE", "GENDER_ID"),
by.y = c("AGE", "GENDER_ID")
)
reward_summary_w_demo$perc <- reward_summary_w_demo$num_enter /
reward_summary_w_demo$num
# reward titles too long- gsub replacements
reward_summary_w_demo$REWARD_TITLE <- gsub('Enter for Access to', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Enter to Win a Trip', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Gain Access to the Zumiez', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Gain Access to ', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Enter to Win', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Access to the Zumiez', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- gsub('Gain VIP', '', reward_summary_w_demo$REWARD_TITLE)
reward_summary_w_demo$REWARD_TITLE <- substr(reward_summary_w_demo$REWARD_TITLE, 0, 50)
who_likes_reward <- ggplot(reward_summary_w_demo,
aes(x=AGE, y=perc, group=GENDER_ID, color=GENDER_ID)
) + geom_line()
who_likes_reward + facet_wrap( ~ REWARD_TITLE) +
ggtitle("% of Users Redeeming, by Reward Category") +
theme(plot.title=element_text(size=30, face="bold"))
reward_summary_w_demo$REWARD_TITLE <- substr(reward_summary_w_demo$REWARD_TITLE, 0, 40)
who_likes_reward <- ggplot(reward_summary_w_demo,
aes(x=AGE, y=perc, group=GENDER_ID, color=GENDER_ID)
) + geom_line()
who_likes_reward + facet_wrap( ~ REWARD_TITLE) +
ggtitle("% of Users Redeeming, by Sweeps Category") +
theme(plot.title=element_text(size=30, face="bold"))
who_likes_reward + facet_wrap( ~ REWARD_TITLE) +
ggtitle("% of Users Redeeming, by Sweeps") +
theme(plot.title=element_text(size=30, face="bold"))
quit()
package(qcc)
install.packages(qcc)
install.packages('qcc')
library(qcc)
data(orangejuice)
oj <- data(orangejuice)
oj
orangejuice
blu <- read.csv('/Users/JL/ShareFile/CrowdTwist/data_team/from_clients/[Book1]blu_all_jan_purch')
library(ggplot2)
library(ggplot2)
blu <- read.csv(r'/Users/JL/ShareFile/CrowdTwist/data_team/from_clients/[Book1]blu_all_jan_purch')
blu <- read.csv('/Users/JL/ShareFile/CrowdTwist/data_team/from_clients/[Book1]blu_all_jan_purch')
'
'
head(blu)
blu <- read.csv('/Users/JL/ShareFile/CrowdTwist/data_team/from_clients/blu_jan_purch.csv')
head(blu)
head(blu, 40)
length(blu)
rnum(blu)
nrow(blu)
library(plyr)
ddply(blu, .('Customer.Name', 'Product.SKU', sum('Quantity.Purchased')))
ddply(blu, .('Customer.Name', 'Product.SKU'), sum('Quantity.Purchased'))
# purchases by SKU's, including current packs with starter kits
ddply(blu,
.('Customer.Name', 'Product.SKU'),
summarize,
units = sum('Quantity.Purchased'),
trans =length('Quantity.Purchased')
)
?as.Numeric
?as.Number
?as.number
?as_number
?int
?as.integer
# purchases by SKU's, including current packs with starter kits
ddply(blu,
.('Customer.Name', 'Product.SKU'),
summarize,
units = sum(as.integer('Quantity.Purchased')),
trans = length('Quantity.Purchased')
)
# purchases by SKU's, including current packs with starter kits
ddply(blu,
.(Customer.Name, Product.SKU),
summarize,
units = sum(as.integer('Quantity.Purchased')),
trans = length('Quantity.Purchased')
)
all.purch <-
ddply(blu,
.(Customer.Name, Product.SKU),
summarize,
units = sum(as.integer('Quantity.Purchased')),
trans = length('Quantity.Purchased')
)
)
head(all.purch)
?as.float
?as.number
?as.numeric
all.purch <-
ddply(blu,
.(Customer.Name, Product.SKU),
summarize,
units = sum(as.numeric('Quantity.Purchased')),
trans = length('Quantity.Purchased')
)
install.packages("devtools")
devtools::install_github("bigvis")
devtools::has_devel
install.packages("Rcoo")
install.packages("Rcpp")
devtools::install_github("bigvis")
install.packages("Rcpp")
devtools::install_github("bigvis")
install.packages("devtools")
devtools::install_github("bigvis")
install.packages("Rcpp")
devtools::install_github("bigvis")
devtools::has_devel
library("bigvis")
library("ggplot2")
library("plyr")
library("bigmemory")
pdata <- read.csv("/Users/JL/Dropbox/CUNY/datasets/all_PLUTO_data.csv")
builtFar <- pdata$BuiltFAR[pdata$NumFloors != 0 ]
numFloor <- pdata$NumFloors[pdata$NumFloors != 0 ]
yrBuilt  <- pdata$YearBuilt[pdata$NumFloors != 0 ]
assessTot <- pdata$AssessTot[pdata$NumFloors !=0]
builtVsFloor <- condense(bin(builtFar, 1), bin(numFloor, 1))
myBreaks <- c(100000, 10000, 1000, 100, 10, 1)
p <- autoplot(builtVsFloor) + element_rect(fill=NULL) + xlim(0,50) + ylim(0,50)
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
rm(numFloor)
rm(builtFar)
assessVsYr <- condense(bin(yrBuilt,2), bin(assessTot, 10000))
assessVsYr
head(assessVsYr)
head(assessVsYr,100)
yrBuilt  <- pdata$YearBuilt[pdata$YearBuilt > 1850 ]
assessTot <- pdata$AssessTot[pdata$YearBuilt > 1850]
assessVsYr <- condense(bin(yrBuilt,2), bin(assessTot, 10000))
head(assessVsYr,100)
tail(assessVsYr,100)
assessVsYr <- condense(bin(yrBuilt,3), bin(assessTot, 10000))
tail(assessVsYr,100)
yrBuilt  <- pdata$YearBuilt[pdata$YearBuilt > 1850 & pdata$AssessTot > 10000]
assessTot <- pdata$AssessTot[pdata$YearBuilt > 1850 & pdata$AssessTot > 10000]
assessVsYr <- condense(bin(yrBuilt,3), bin(assessTot, 10000))
tail(assessVsYr,100)
assessVsYr <- condense(bin(yrBuilt,3), bin(assessTot, 20000))
tail(assessVsYr,100)
yrBuilt  <- pdata$YearBuilt[pdata$YearBuilt > 1850 & pdata$AssessTot > 10000 & pdata$AssessTot < 10000000 ]
assessTot <- pdata$AssessTot[pdata$YearBuilt > 1850 & pdata$AssessTot > 10000 & pdata$AssessTot < 10000000]
rm(builtVsFloor)
assessVsYr <- condense(bin(yrBuilt,3), bin(assessTot, 20000))
assessVsYr
tail(assessVsYr,100)
autoplot(assessVsYr) + xlim(1850,2015)
autoplot(assessVsYr) + element_rect(fill=NULL) + xlim(1850,2015)
autoplot(assessVsYr) + element_rect(fill=NULL) + xlim(1850,2015)
autoplot(assessVsYr) + element_rect(fill=NULL) + xlim(1850,2015)
autoplot(assessVsYr) + element_rect(fill='white') + xlim(1850,2015)
autoplot(assessVsYr) + element_rect(fill='Null') + xlim(1850,2015)
autoplot(assessVsYr) + element_rect(fill=Null) + xlim(1850,2015)
autoplot(assessVsYr) + element_rect(fill=NA) + xlim(1850,2015)
autoplot(assessVsYr) + element_rect(fill='grey') + xlim(1850,2015)
p <- autoplot(assessVsYr) + element_rect(fill=NULL) + xlim(1850,2015)
p
p <- autoplot(assessVsYr) + theme_grey() + xlim(1850,2015)
p
p <- autoplot(assessVsYr) + theme(element+rect(fill=NULL)) + xlim(1850,2015)
p <- autoplot(assessVsYr) + theme(element_rect(fill=NULL)) + xlim(1850,2015)
p <- autoplot(assessVsYr) + theme(element_rect=NULL) + xlim(1850,2015)
p <- autoplot(assessVsYr) + element_rect(fill=NULL) + xlim(1850,2015)
p
p
p <- autoplot(assessVsYr) + theme(panel.background=element_rect(fill=NULL)) + xlim(1850,2015)
p
p <- autoplot(assessVsYr) + theme(panel.background=element_rect(fill='white')) + xlim(1850,2015)
p
assessVsYr <- condense(bin(yrBuilt,3), bin(assessTot, 50000))
p <- autoplot(assessVsYr) + theme(panel.background=element_rect(fill='white')) + xlim(1850,2015)
p
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
yr <- condence(bin(yrBuilt,1))
yr <- condense(bin(yrBuilt,1))
autoplot(yr)
yr <- condense(bin(yrBuilt,2))
autoplot(yr)
yr <- condense(bin(yrBuilt,5))
autoplot(yr)
yr <- condense(bin(yrBuilt,2))
yr
numFloor <- pdata$NumFloors[pdata$YearBuilt > 1850 & pdata$AssessTot > 10000 & pdata$AssessTot < 10000000 & pdata$NumFloors != 0 ]
yrBuilt  <- pdata$YearBuilt[pdata$YearBuilt > 1850 & pdata$AssessTot > 10000 & pdata$AssessTot < 10000000 & pdata$NumFloors != 0 ]
flrVsYr <- condense(bin(yrBuilt, 3), bin(numFloor, 1))
flrVsYr
autoplot(flrVsYr)
autoplot(flrVsYr) + theme(panel.background=element_rect(fill='white')) + ylim(0,50)
p <- autoplot(flrVsYr) + theme(panel.background=element_rect(fill='white')) + ylim(0,50)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
flrVsYr <- condense(bin(yrBuilt, 1), bin(numFloor, 1))
p <- autoplot(flrVsYr) + theme(panel.background=element_rect(fill='white')) + ylim(0,50)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p <- autoplot(assessVsYr) + theme(panel.background=element_rect(fill='white')) + xlim(1850,2015)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
valPerFloor <- assessTot/numFloor
assessTot <- pdata$AssessTot[pdata$YearBuilt > 1850 & pdata$AssessTot > 10000 & pdata$AssessTot < 10000000 & pdata$NumFloors != 0]
valPerFloor <- assessTot/numFloor
ValPerYr <- condense(bin(yrBuilt,1), bin(valPerFloor, 1))
tail(ValPerYr)
ValPerYr <- condense(bin(yrBuilt,1), bin(valPerFloor, 50000))
tail(ValPerYr)
p <- autoplot(ValPerYr) + theme(panel.background=element_rect(fill='white')) + ylim(0,50)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p <- autoplot(ValPerYr) + theme(panel.background=element_rect(fill='white'))
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p <- autoplot(ValPerYr) + theme(panel.background=element_rect(fill='white')) + xlim(1945,2014)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p <- autoplot(ValPerYr) + theme(panel.background=element_rect(fill='white')) + xlim(1930,1960)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
fix(assessVsYr)
source('~/Dropbox/CUNY/my_solutions/lect2.r')
lotArea  <-pdata$LotArea[pdata$YearBuilt > 1850 & pdata$LotArea > 100 & pdata$AssessTot < 10000000 & pdata$NumFloors != 0 ]
yrBuilt  <- pdata$YearBuilt[pdata$YearBuilt > 1850 & pdata$LotArea > 100 & pdata$AssessTot < 10000000 & pdata$NumFloors != 0  ]
areaVsYr <- condense(bin(yrBuilt, 1), bin(lotArea, 1000))
tail(areaVsYr)
myBreaks <- c(100000, 10000, 1000, 100, 10, 1)
p <- autoplot(areaVsYr) + element_rect(fill=NULL)
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))  + ylim(0, 100000)
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))  + ylim(0, 200000)
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
yr <- condense(bin(yrBuilt, 1), z=lotArea)
autoplot(yr)
autoplot(yr) + xlim(1900, 2014)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 50000)
yr <- condense(bin(yrBuilt, 3), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 50000)
yr <- condense(bin(yrBuilt, 5), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 50000)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) = ylab('lotArea')
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))  + ylim(0, 200000)
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
areaVsYr <- condense(bin(yrBuilt, 2), bin(lotArea, 1000))
myBreaks <- c(100000, 10000, 1000, 100, 10, 1)
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))  + ylim(0, 200000)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
library("bigvis")
library("ggplot2")
lotArea  <-pdata$LotArea[pdata$YearBuilt > 1850 & pdata$LotArea > 100 & pdata$AssessTot < 10000000 & pdata$NumFloors != 0 ]
pData <- read.csv("~/Dropbox/CUNY/datasets/all_PLUTO_data.R")
pData <- read.csv("/Users/JL/Dropbox/CUNY/datasets/all_PLUTO_data.R")
pData <- read.csv("/Users/JL/Dropbox/CUNY/datasets/all_PLUTO_data.csv")
lotArea  <-pdata$LotArea[pdata$YearBuilt > 1850 & pdata$LotArea > 100 & pdata$AssessTot < 10000000 & pdata$NumFloors != 0 ]
lotArea  <-pData$LotArea[pData$YearBuilt > 1850 & pData$LotArea > 100 & pData$AssessTot < 10000000 & pData$NumFloors != 0 ]
yrBuilt  <- pData$YearBuilt[pData$YearBuilt > 1850 & pData$LotArea > 100 & pData$AssessTot < 10000000 & pData$NumFloors != 0  ]
yr <- condense(bin(yrBuilt, 5), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
yr <- condense(bin(yrBuilt, 10), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
yr <- condense(bin(yrBuilt, 1), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
rm(all.purch)
rm(blu)
q()
~/.RData
library("bigvis")
library("ggplot2")
All_dataBKBXMNQNSI <- read.csv('/Users/JL/Dropbox/CUNY/datasets/all_PLUTO_data.csv')
All_dataBKBXMNQNSI$AssValperfl<-All_dataBKBXMNQNSI$AssessTot/All_dataBKBXMNQNSI$NumFloors
ggplot(All_dataBKBXMNQNSI[subset, c("NumFloors","YearBuilt")  ], aes(y=(NumFloors), x =YearBuilt)) + geom_point(shape=1)
library("ggplot2")
ggplot(All_dataBKBXMNQNSI[subset, c("NumFloors","YearBuilt")  ], aes(y=(NumFloors), x =YearBuilt)) + geom_point(shape=1)
subset <- which(All_dataBKBXMNQNSI$YearBuilt > 1850 &
All_dataBKBXMNQNSI$LotArea > 100 &
All_dataBKBXMNQNSI$AssessTot < 10000000 &
All_dataBKBXMNQNSI$NumFloors != 0 )
ggplot(All_dataBKBXMNQNSI[subset, ], aes(x=YearBuilt)) + geom_histogram(binwidth=5)
ggplot(All_dataBKBXMNQNSI[subset, c("NumFloors","YearBuilt")  ], aes(y=(NumFloors), x =YearBuilt)) + geom_point(shape=1)
pData <- read.csv('/Users/JL/Dropbox/CUNY/datasets/all_PLUTO_data.csv')
?smooth
library(ggplot2)
library(bigvis)
library(plyr)
?smooth
pData <- pData[pData$YearBuilt >= 1850, ]
# Convert to factors
pData$Borough <- as.factor(pData$Borough)
pData$LtdHeight <- as.factor(pData$LtdHeight)
pData$LandUse <- as.factor(pData$LandUse)
pData$BuiltCode <- as.factor(pData$BuiltCode)
# Remove data when numfloors & numbuildings == 0
pData <- pData[!(pData$NumBldgs == 0 & pData$NumFloors == 0), ]
# Get rid of lots with a really small area
pData <- pData[pData$LotArea > 100, ]
# There are two assessments in the data, one for total and one for land.
# Since we are interested in building construction, it makes sense to look
# only at the value of the building, which is total assessment - land assessment.
# Add that column to the data as AssessBldg.
pData$AssessBldg <- pData$AssessTot - pData$AssessLand
pData <- pData[pData$AssessBldg > 0 & pData$BldgArea > 0, ]
pData$AssessSqft <- pData$AssessBldg / pData$BldgArea
# To compute cost per floor, will first filter out buildings with 0 floors
pData <- pData[pData$NumFloors != 0, ]
# Now add a column for cost per floor
pData$ValuePerFloor <- pData$AssessBldg / pData$NumFloors
# Figure 1
ggplot(pData, aes(YearBuilt, fill=BuiltCode)) +
geom_bar(stat="bin", binwidth = 10) +
scale_x_continuous(breaks=seq(1850, 2025, 10))  +
geom_vline(x=seq(1850, 2025, 10), color="white") +
theme(panel.grid.minor.x=element_blank()) +
ggtitle("Construction activity per decade") +
xlab("Year") + ylab("Number of buildings") +
scale_fill_discrete(name = "Record Type",
breaks=c("", "E"),
labels=c("Known", "Estimated"))
# Figure 2
floors <- condense(bin(pData$YearBuilt, 10), bin(pData$NumFloors, 2))
autoplot(floors) + theme_bw() +
scale_fill_gradient("Number Built",
trans = 'log',
# limits = c(1, 1000),
low="lightgray", high="black") +
scale_y_continuous(breaks=seq(0, 130, 10)) +
scale_x_continuous(breaks=seq(1850, 2020, 10)) +
xlab("Year Built") +
ylab("Number of floors") +
ggtitle("Height distribution of buildings.") +
geom_hline(y=c(20, 30, 40), color="blue")
# Figure 3
bin.year <- 1
sf <- bin.year * 10 # smoothing factor
sf
?smooth
?paste0
stype
value <- condense(bin(pData$YearBuilt, bin.year),
z=pData$ValuePerFloor,
summary=stype)
stype = "median" # condense summary. set to [mean, median]
smethod = "robust_regression" # set to [mean, regression, robust_regression]
value <- condense(bin(pData$YearBuilt, bin.year),
z=pData$ValuePerFloor,
summary=stype)
value.s <- smooth(value, sf, var=paste0(".", stype), type=smethod)
?smooth
setwd('~/Dropbox/CUNY/CUNY_IS608/lecture3/shiny_graph_sample')
runApp()
library('shiny')
runApp()
setwd('~/Dropbox/CUNY/CUNY_IS608/lecture4/hw3_sample')
runApp()
runApp()
mort <- read.csv('../data/cleaned-cdc-mortality-1999-2010.csv')
mort <- read.csv('../data/cleaned-cdc-mortality-1999-2010.csv')
summary(mort)
ggplot(mort, aes(x=Deaths, y=Year)) + geom_point()
